strict digraph "compose( ,  )" {
	node [label="\N"];
	"27:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdbd5eaa110>",
		fillcolor=springgreen,
		label="27:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"28:BS"	[ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5e46150>",
		fillcolor=cadetblue,
		label="28:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5e46150>]",
		style=filled,
		typ=BlockingSubstitution];
	"27:IF" -> "28:BS"	[cond="['a', 'b']",
		label="(a || b)",
		lineno=27];
	"29:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdbd5a98c90>",
		fillcolor=springgreen,
		label="29:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"30:BS"	[ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98cd0>",
		fillcolor=cadetblue,
		label="30:BS
next_state = SAB;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98cd0>]",
		style=filled,
		typ=BlockingSubstitution];
	"29:IF" -> "30:BS"	[cond="['a', 'b']",
		label="(a && b)",
		lineno=29];
	"31:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdbd5a98810>",
		fillcolor=springgreen,
		label="31:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"29:IF" -> "31:IF"	[cond="['a', 'b']",
		label="!((a && b))",
		lineno=29];
	"Leaf_16:AL"	[def_var="['cur_state']",
		label="Leaf_16:AL"];
	"37:AS"	[ast="<pyverilog.vparser.ast.Assign object at 0x7fdbd5a98fd0>",
		def_var="['z']",
		fillcolor=deepskyblue,
		label="37:AS
z = cur_state == SAB;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['cur_state']"];
	"Leaf_16:AL" -> "37:AS";
	"23:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7fdbd5be6e90>",
		clk_sens=False,
		fillcolor=gold,
		label="23:AL",
		sens="['cur_state', 'a', 'b']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['a', 'cur_state', 'b']"];
	"Leaf_16:AL" -> "23:AL";
	"32:BS"	[ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98d90>",
		fillcolor=cadetblue,
		label="32:BS
next_state = SB;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98d90>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_23:AL"	[def_var="['next_state']",
		label="Leaf_23:AL"];
	"32:BS" -> "Leaf_23:AL"	[cond="[]",
		lineno=None];
	"24:CS"	[ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fdbd73ff450>",
		fillcolor=linen,
		label="24:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"33:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7fdbd5a98350>",
		fillcolor=lightcyan,
		label="33:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"24:CS" -> "33:CA"	[cond="['cur_state']",
		label=cur_state,
		lineno=24];
	"25:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7fdbd5be6650>",
		fillcolor=lightcyan,
		label="25:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"24:CS" -> "25:CA"	[cond="['cur_state']",
		label=cur_state,
		lineno=24];
	"29:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7fdbd5f5ee50>",
		fillcolor=lightcyan,
		label="29:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"24:CS" -> "29:CA"	[cond="['cur_state']",
		label=cur_state,
		lineno=24];
	"20:NS"	[ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdbd5bf1250>",
		fillcolor=firebrick,
		label="20:NS
cur_state <= next_state;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdbd5bf1250>]",
		style=filled,
		typ=NonblockingSubstitution];
	"20:NS" -> "Leaf_16:AL"	[cond="[]",
		lineno=None];
	"28:BS" -> "Leaf_23:AL"	[cond="[]",
		lineno=None];
	"17:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdbd5b8ebd0>",
		fillcolor=springgreen,
		label="17:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"17:IF" -> "20:NS"	[cond="['reset']",
		label="!(reset)",
		lineno=17];
	"18:NS"	[ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdbd5b8e4d0>",
		fillcolor=firebrick,
		label="18:NS
cur_state <= IDLE;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7fdbd5b8e4d0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"17:IF" -> "18:NS"	[cond="['reset']",
		label=reset,
		lineno=17];
	"18:NS" -> "Leaf_16:AL"	[cond="[]",
		lineno=None];
	"26:BS"	[ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd9d45d10>",
		fillcolor=cadetblue,
		label="26:BS
next_state = SA;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd9d45d10>]",
		style=filled,
		typ=BlockingSubstitution];
	"26:BS" -> "Leaf_23:AL"	[cond="[]",
		lineno=None];
	"16:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7fdbd5be3890>",
		clk_sens=True,
		fillcolor=gold,
		label="16:AL",
		sens="['clk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'next_state']"];
	"16:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7fdbd5be3ed0>",
		fillcolor=turquoise,
		label="16:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"16:AL" -> "16:BL"	[cond="[]",
		lineno=None];
	"33:BS"	[ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98890>",
		fillcolor=cadetblue,
		label="33:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fdbd5a98890>]",
		style=filled,
		typ=BlockingSubstitution];
	"33:BS" -> "Leaf_23:AL"	[cond="[]",
		lineno=None];
	"23:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7fdbd5be6850>",
		fillcolor=turquoise,
		label="23:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"23:BL" -> "24:CS"	[cond="[]",
		lineno=None];
	"Leaf_23:AL" -> "16:AL";
	"25:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7fdbd92a4190>",
		fillcolor=springgreen,
		label="25:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"25:IF" -> "27:IF"	[cond="['a', 'b']",
		label="!((a && b))",
		lineno=25];
	"25:IF" -> "26:BS"	[cond="['a', 'b']",
		label="(a && b)",
		lineno=25];
	"30:BS" -> "Leaf_23:AL"	[cond="[]",
		lineno=None];
	"33:CA" -> "33:BS"	[cond="[]",
		lineno=None];
	"25:CA" -> "25:IF"	[cond="[]",
		lineno=None];
	"31:IF" -> "32:BS"	[cond="['a', 'b']",
		label="(a || b)",
		lineno=31];
	"23:AL" -> "23:BL"	[cond="[]",
		lineno=None];
	"29:CA" -> "29:IF"	[cond="[]",
		lineno=None];
	"16:BL" -> "17:IF"	[cond="[]",
		lineno=None];
}
