strict digraph "compose( ,  )" {
	node [label="\N"];
	"14:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0f23610>",
		fillcolor=turquoise,
		label="14:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"15:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7f03b0f31150>",
		fillcolor=springgreen,
		label="15:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"14:BL" -> "15:IF"	[cond="[]",
		lineno=None];
	"31:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0b983d0>",
		fillcolor=turquoise,
		label="31:BL
next_state = 0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f03b0b98c90>]",
		style=filled,
		typ=Block];
	"Leaf_24:AL"	[def_var="['next_state']",
		label="Leaf_24:AL"];
	"31:BL" -> "Leaf_24:AL"	[cond="[]",
		lineno=None];
	"20:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0f31250>",
		fillcolor=turquoise,
		label="20:BL
present_state <= next_state;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f03b0f31050>]",
		style=filled,
		typ=Block];
	"Leaf_13:AL"	[def_var="['present_state']",
		label="Leaf_13:AL"];
	"20:BL" -> "Leaf_13:AL"	[cond="[]",
		lineno=None];
	"12:AS"	[ast="<pyverilog.vparser.ast.Assign object at 0x7f03b0ed6bd0>",
		def_var="['out']",
		fillcolor=deepskyblue,
		label="12:AS
out = present_state & in;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['present_state', 'in']"];
	"13:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7f03b0f23e10>",
		clk_sens=True,
		fillcolor=gold,
		label="13:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'next_state']"];
	"Leaf_24:AL" -> "13:AL";
	"27:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b49a5190>",
		fillcolor=turquoise,
		label="27:BL
next_state = 1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f03b5085d10>]",
		style=filled,
		typ=Block];
	"27:BL" -> "Leaf_24:AL"	[cond="[]",
		lineno=None];
	"26:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7f03b129ee50>",
		fillcolor=springgreen,
		label="26:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"26:IF" -> "27:BL"	[cond="['present_state', 'in']",
		label="((present_state == 1) && (in == 0))",
		lineno=26];
	"30:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7f03b0b98cd0>",
		fillcolor=springgreen,
		label="30:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"26:IF" -> "30:IF"	[cond="['present_state', 'in']",
		label="!(((present_state == 1) && (in == 0)))",
		lineno=26];
	"30:IF" -> "31:BL"	[cond="['present_state', 'in']",
		label="((present_state == 0) && (in == 1))",
		lineno=30];
	"35:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0b98810>",
		fillcolor=turquoise,
		label="35:BL
next_state = present_state;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f03b0b98bd0>]",
		style=filled,
		typ=Block];
	"30:IF" -> "35:BL"	[cond="['present_state', 'in']",
		label="!(((present_state == 0) && (in == 1)))",
		lineno=30];
	"35:BL" -> "Leaf_24:AL"	[cond="[]",
		lineno=None];
	"13:AL" -> "14:BL"	[cond="[]",
		lineno=None];
	"Leaf_13:AL" -> "12:AS";
	"24:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7f03b0f26e90>",
		clk_sens=True,
		fillcolor=gold,
		label="24:AL",
		sens="['clk']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['present_state', 'in']"];
	"Leaf_13:AL" -> "24:AL";
	"15:IF" -> "20:BL"	[cond="['reset']",
		label="!(reset)",
		lineno=15];
	"16:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0ecee90>",
		fillcolor=turquoise,
		label="16:BL
present_state <= next_state;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f03b0ecebd0>]",
		style=filled,
		typ=Block];
	"15:IF" -> "16:BL"	[cond="['reset']",
		label=reset,
		lineno=15];
	"25:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f03b0f26750>",
		fillcolor=turquoise,
		label="25:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"24:AL" -> "25:BL"	[cond="[]",
		lineno=None];
	"25:BL" -> "26:IF"	[cond="[]",
		lineno=None];
	"16:BL" -> "Leaf_13:AL"	[cond="[]",
		lineno=None];
}
