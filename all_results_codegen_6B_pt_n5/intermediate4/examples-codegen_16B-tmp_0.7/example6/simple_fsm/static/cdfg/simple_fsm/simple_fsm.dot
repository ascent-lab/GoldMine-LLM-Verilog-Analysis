strict digraph "compose( ,  )" {
	node [label="\N"];
	"22:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7f4547adee50>",
		clk_sens=False,
		fillcolor=gold,
		label="22:AL",
		sens="['present_state', 'in']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['present_state', 'in']"];
	"22:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f45477eae90>",
		fillcolor=turquoise,
		label="22:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"22:AL" -> "22:BL"	[cond="[]",
		lineno=None];
	"24:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7f45477ea1d0>",
		fillcolor=lightcyan,
		label="24:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"24:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f45473d8b10>",
		fillcolor=turquoise,
		label="24:BL
next_state = (in)? 0 : 1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f4547786550>]",
		style=filled,
		typ=Block];
	"24:CA" -> "24:BL"	[cond="[]",
		lineno=None];
	"30:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7f45473d8990>",
		fillcolor=lightcyan,
		label="30:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"30:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f45473d8d50>",
		fillcolor=turquoise,
		label="30:BL
next_state = 0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f45473d8f10>]",
		style=filled,
		typ=Block];
	"30:CA" -> "30:BL"	[cond="[]",
		lineno=None];
	"15:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f454777d4d0>",
		fillcolor=turquoise,
		label="15:BL
present_state <= 0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f4547767e90>]",
		style=filled,
		typ=Block];
	"Leaf_14:AL"	[def_var="['present_state']",
		label="Leaf_14:AL"];
	"15:BL" -> "Leaf_14:AL"	[cond="[]",
		lineno=None];
	"23:CS"	[ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f45473d8890>",
		fillcolor=linen,
		label="23:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"22:BL" -> "23:CS"	[cond="[]",
		lineno=None];
	"Leaf_22:AL"	[def_var="['next_state']",
		label="Leaf_22:AL"];
	"30:BL" -> "Leaf_22:AL"	[cond="[]",
		lineno=None];
	"24:BL" -> "Leaf_22:AL"	[cond="[]",
		lineno=None];
	"14:AL"	[ast="<pyverilog.vparser.ast.Always object at 0x7f4547772650>",
		clk_sens=True,
		fillcolor=gold,
		label="14:AL",
		sens="['clk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'next_state']"];
	"14:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f4547772250>",
		fillcolor=turquoise,
		label="14:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"14:AL" -> "14:BL"	[cond="[]",
		lineno=None];
	"18:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f4547767ad0>",
		fillcolor=turquoise,
		label="18:BL
present_state <= next_state;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f4547767350>]",
		style=filled,
		typ=Block];
	"18:BL" -> "Leaf_14:AL"	[cond="[]",
		lineno=None];
	"27:BL"	[ast="<pyverilog.vparser.ast.Block object at 0x7f45473d84d0>",
		fillcolor=turquoise,
		label="27:BL
next_state = (in)? 1 : 0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f45473d8bd0>]",
		style=filled,
		typ=Block];
	"27:BL" -> "Leaf_22:AL"	[cond="[]",
		lineno=None];
	"15:IF"	[ast="<pyverilog.vparser.ast.IfStatement object at 0x7f4547767850>",
		fillcolor=springgreen,
		label="15:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"14:BL" -> "15:IF"	[cond="[]",
		lineno=None];
	"27:CA"	[ast="<pyverilog.vparser.ast.Case object at 0x7f45473d8d10>",
		fillcolor=lightcyan,
		label="27:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"27:CA" -> "27:BL"	[cond="[]",
		lineno=None];
	"23:CS" -> "24:CA"	[cond="['present_state']",
		label=present_state,
		lineno=23];
	"23:CS" -> "30:CA"	[cond="['present_state']",
		label=present_state,
		lineno=23];
	"23:CS" -> "27:CA"	[cond="['present_state']",
		label=present_state,
		lineno=23];
	"13:AS"	[ast="<pyverilog.vparser.ast.Assign object at 0x7f45477643d0>",
		def_var="['out']",
		fillcolor=deepskyblue,
		label="13:AS
out = (present_state == 1) && (in == 0) || (present_state == 0) && (in == 1);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['present_state', 'in', 'present_state', 'in']"];
	"15:IF" -> "15:BL"	[cond="['reset']",
		label=reset,
		lineno=15];
	"15:IF" -> "18:BL"	[cond="['reset']",
		label="!(reset)",
		lineno=15];
	"Leaf_22:AL" -> "14:AL";
	"Leaf_14:AL" -> "22:AL";
	"Leaf_14:AL" -> "13:AS";
}
